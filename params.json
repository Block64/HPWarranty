{"name":"HPWarranty","tagline":"PowerShell module to help retrieve Hewlett-Packard Warranty Information","body":"This module contains four functions:\r\n* Invoke-SOAPRequest\r\n* Invoke-HPWarrantyRegistrationRequest\r\n* Invoke-HPWarrantyLookup\r\n* Get-HPComputerInformationForWarrantyRequestFromCMDB\r\n\r\nThe Invoke-SOAPRequst is not really used by a user, but it is used by the two other Invoke-HP* functions.  Basically, to use HPs ISEE to get warranty info, there are a few things that need to happen:\r\n\r\n1.  A Session needs to be established with their Web Services, this is done by using the Invoke-HPWarrantyRegistrationRequest.  You need a valid SerialNumber and Product Model to do this.  If successful, it will return a Gdid and a Session Token, that then needs to be passed to the Invoke-HPWarrantyLookup.\r\n2.  Using the Gdid and the Token from step 1, and a valid SerialNumber and ProductNumber you can request the information for that device, returning the SerialNumber,WarrantyStartDate,WarrantyStandardEndDate, and WarrantyExtendedEndDate.  (The return SOAP Envelop contains much more information, but that is was I parse and return).\r\n3.  You can reuse the Gdid and Token from step one in a foreach loop to retrieve multiple warranty objects.  That is why I created the Get-HPComputerInformationForWarrantyRequestFromCCMDB.  If you configure your SCCM Client to inventory the MS_SystemInformation WMI Class (Found in the root namespace, not in CIMV2, root\\MS_SystemInformation) you can then use this function to return form the CM_<SiteCode> database an array of objects containing the information needed to complete all actions.  SerialNumber,ProductModel,ProductNumber,ProductManufacturer.\r\n\r\n\r\nExample 1:\r\n\r\n\t# Execute from a local HP Workstation\r\n\tImport-Module HPWarranty; Invoke-HPWarrantyLookup\r\n\r\nExample 2:\r\n\r\n\t# Create one session but look up multiple warranty's\r\n\tImport-Module -Name HPWarranty\r\n\t\r\n\t$HP1 = @{\r\n\t\t'SerialNumber' = 'A1B2C3D4E5'\r\n\t\t'ProductModel' = 'HP Laptop 100 G1'\r\n\t\t'ProductNumber' = '123ABC'\r\n\t}\r\n\t\r\n\t$HP2 = @{\r\n\t\t'SerialNumber' = '12345ABCDE'\r\n\t\t'ProductModel' = 'HP Desktop 1100 G1'\r\n\t\t'ProductNumber' = 'ABC123'\r\n\t}\r\n\t\r\n\t# Use either HP1 or HP2 properties to establish a session with the HP Web Services.\r\n\t$reg = Invoke-HPWarrantyRegistrationRequest -SerialNumber $HP1.SerialNumber -ProductModel $HP1.ProductModel\r\n\t\r\n\tInvoke-HPWarrantyLookup -Gdid $reg.Gdid -Token $reg.Token -SerialNumber $HP1.SerialNumber -ProductNumber $HP1.ProductNumber\r\n\tInvoke-HPWarrantyLookup -Gdid $reg.Gdid -Token $reg.Token -SerialNumber $HP2.SerialNumber -ProductNumber $HP2.ProductNumber\r\n\r\nExample 3:\r\n\r\n\t# Query a remote computer for information to create a session with the the HP Web Services.\r\n\t# Remote WMI access is necessary to use this function remotely.\r\n\tImport-Module -Name HPWarranty\r\n\t\r\n\t$reg = Invoke-HPWarrantyRegistrationRequest -ComputerName HPComputer.mydomain.org\r\n\t\r\n\tInvoke-HPWarrantyLookup -Gdid $reg.Gdid -Token $reg.Token -ComputerName HPComputer.mydomain.org\r\n\t\r\nExample 4:\r\n\r\n\t# Execute with information from ConfigMgr Database:\r\n\tImport-Module -Name HPWarranty\r\n\r\n\t$reg = Invoke-HPWarrantyRegistrationRequest -SeralNumber \"ABCDE12345\" -ProductModel \"HP ProBook 645 G1\"\r\n\r\n\t$HPs = Get-HPComputerInformationForWarrantyRequestFromCMDB -SqlServer MySccmDBServer -Database CM_MS1 -IntergratedSecurity\r\n\tforeach ($HP in $HPs)\r\n\t{\r\n\t\t Invoke-HPWarrantyLookup -Gdid $reg.Gdid -Token $reg.Token -SerialNumber $HP.SerialNumber -ProductNumber $HP.ProductNumber\r\n\t}\r\n\t\r\nExample 5:\r\n\r\n\t# Hashtables are a little tricky to export to CSV, so here is how I run my build date report:\r\n\tImport-Module -Name HPWarranty\r\n\tImport-Module -Name ActiveDirectory\r\n\r\n\t$reg = Invoke-HPWarrantyRegistrationRequest\r\n\t\r\n\t# This output is tailored to the request that was given to me, not all of these values maybe necessary to return.\r\n    Get-HPComputerInformationForWarrantyRequestFromCMDB -SqlServer MyCMDB.mydomain.org -Database CM_MS1 -IntergratedSecurity |\r\n    Select-Object -Property @{ Name = 'ComputerName';     Expression = { $_.ComputerName } }, \r\n                            @{ Name = 'SerialNumber';     Expression = { $_.SerialNumber } }, \r\n                            @{ Name = 'ProductModel';     Expression = { $_.ProductModel } }, \r\n                            @{ Name = 'BuildDate';        Expression = { (Invoke-HPWarrantyLookup -Gdid $reg.Gdid -Token $reg.Token -SerialNumber $_.SerialNumber -ProductNumber $_.ProductNumber).WarrantyStartDate } },\r\n                            @{ Name = 'LastHardwareScan'; Expression = { Get-Date (Get-Date $_.LastHardwareScan).ToShortDateString() -Format 'yyyy-MM-dd' } },\r\n                            @{ Name = 'LastLoggedOnUser'; Expression = { $_.Username } },\r\n                            @{ Name = 'CompanyName';      Expression = { if ($_.Username -ne $null){ (Get-ADUser -Identity $_.Username.ToString().Trim('MYDOMAIN\\') -Properties Company).Company } } } |\r\n    Export-Csv -Path C:\\HPBuildInfo.csv -NoTypeInformation -Append ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}